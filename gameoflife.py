#!/usr/bin/python
"""
 Author: James A. Shackleford
   Date: Oct. 16th, 2015

   A simple implementation of Conway's Game of Life
"""
import patterns
import sys
import argparse
import random
from math import ceil
from matplotlib import pyplot as plt
from matplotlib import animation
import collections
import warnings


def generate_world(opts):
    """
    Accepts: opts  -- parsed command line options
    Returns: world -- a list of lists that forms a 2D pixel buffer

    Description: This function generates a 2D pixel buffer with dimensions
                 opts.cols x opts.rows (in pixels).  The initial contents
                 of the generated world is determined by the value provided
                 by opts.world_type: either 'random' or 'empty'  A 'random'
                 world has 10% 'living' pixels and 90% 'dead' pixels.  An
                 'empty' world has 100% 'dead' pixels.
    """

    world = []
    if opts.world_type == 'empty':
        # append of list of zeros to world list for each row specified by the user
        for _ in range(opts.rows):
            world.append([0] * opts.cols)
    if opts.world_type == 'random':
        # check to make sure the user supplied valid dimensions
        if int((opts.cols * opts.rows * .10)) < 1:
            print 'Dimensions are too small to support 10% living pixels. Exiting.'
            sys.exit()
        # append of list of zeros to world list for each row specified by the user
        for _ in range(opts.rows):
            world.append([0] * opts.cols)
        # create list of coordinates that are alive
        mem = []
        # determine 10% of the area... mem will append up to that many coordinates and exit
        while len(mem) < (int(ceil(opts.cols * opts.rows * .10))):
            y = random.randint(0, opts.rows - 1)        # pick a random y coordinate
            x = random.randint(0, opts.cols - 1)        # pick a random x coordinate
            if [y, x] not in mem:       # continue if the coordinate has already been picked
                world[y][x] = 1         # if not, that coordinate in world is alive
                mem.append([y, x])      # remember the coordinate used
    return world


def update_frame(frame_num, opts, world, img):
    """
    Accepts: frame_num  -- (automatically passed in) current frame number
             opts       -- a populated command line options instance
             world      -- the 2D world pixel buffer
             img        -- the plot image
    """

    # set the current plot image to display the current 2D world matrix
    img.set_array(world)

    # Create a *copy* of 'world' called 'new_world' -- 'new_world' will be
    # our offscreen drawing buffer.  We will draw the next frame to
    # 'new_world' so that we may maintain an in-tact copy of the current
    # 'world' at the same time.

    new_world = []
    for row in world:
        new_world.append(row[:])

    # loop over each element in the 2d list of lists grid
    for y, row in enumerate(world):
        for x, cell in enumerate(row):
            # look at the elements neighbors
            # start a count of how many neighbors are alive
            lives = 0
            for i in range(y - 1, y + 2):
                for j in range(x - 1, x + 2):
                    # If the current neighbor is alive (1) increment lives count. The modulo operator allows
                    # access to the beginning and end of the list from the opposite end. Therefore, a cell
                    # living on the edge will have neighbors on the opposite side of the grid as well
                    # (i.e. len(world) - 1 will be a neighbor if the current position is at len(world)).
                    if world[i % len(world)][j % len(world[0])] == 1:
                        lives += 1
            # after looking through the current elements neighbors, follow the rules for either a living cell
            # or dead cell to determine whether this current cell will die or live through the next frame
            if cell == 1:       # current cell is a living cell
                if lives < 3 or lives > 4:      # lives will include the current element in the count
                    new_world[y][x] = 0
            if cell == 0:       # current cell is a dead cell
                if lives == 3:
                    new_world[y][x] = 1

    # Copy the contents of the new_world into the world
    # (i.e. make the future the present)
    world[:] = new_world[:]
    return img,


def blit(world, pattern, x, y):
    """
    Accepts: world  -- a 2D world pixel buffer generated by generate_world()
             pattern -- a 2D matrix containing a pattern of 1s and 0s
             x      -- x world coord where left edge of sprite will be placed
             y      -- y world coord where top edge of sprite will be placed

    Returns: (Nothing)

    Description: Copies a 2D pixel pattern (i.e sprite) into the larger 2D
                 world.  The sprite will be copied into the 2D world with
                 its top left corner being located at world coordinate (x,y)
    """

    try:
        # loop through each element of the pattern
        for row in pattern:
            for i, elem in enumerate(row):
                    # place the element of the pattern starting at x,y into world (i starts at 0)
                    world[y][x+i] = elem
                    if i + 1 == len(row):   # when we reach the end of the pattern's current row move on to the next
                        y += 1
    # if the next element of the blit pattern is out if bounds an IndexError will be raised
    except IndexError:
        print 'Error creating blit. Pattern may exceed world size or given coordinates are out of bounds. Exiting.'
        sys.exit()


def run_simulation(opts, world):
    """
    Accepts: opts  -- a populated command line options class instance
             world -- a 2D world pixel buffer generated by generate_world()

    Returns: (Nothing)

    Description: This function generates the plot that we will use as a
                 rendering surfance.  'Living' cells (represented as 1s in
                 the 2D world matrix) will be rendered as black pixels and
                 'dead' cells (represetned as 0s) will be rendered as
                 white pixels.  The method FuncAnimation() accepts 4
                 parameters: the figure, the frame update function, a
                 tuple containing arguments to pass to the update function,
                 and the frame update interval (in milliseconds).  Once the
                 show() method is called to display the plot, the frame
                 update function will be called every 'interval'
                 milliseconds to update the plot image (img).
    """
    if not world:
        print "The 'world' was never created. Exiting."
        sys.exit()

    fig = plt.figure()
    img = plt.imshow(world, interpolation='none', cmap='Greys', vmax=1, vmin=0)
    ani = animation.FuncAnimation(fig,
                                  update_frame,
                                  fargs=(opts, world, img),
                                  interval=opts.framedelay)

    plt.show()


def report_options(opts):
    """
    Accepts: opts  -- a populated command line options class instance

    Returns: (Nothing)

    Descrption: This function simply prints the parameters used to
                start the 'Game of Life' simulation.
    """

    print "Conway's Game of Life"
    print "====================="
    print "   World Size: %i x %i" % (opts.rows, opts.cols)
    print "   World Type: %s" % opts.world_type
    print "   Frame Delay: %i (ms)" % opts.framedelay
    if opts.blit:
        print "   Blit Pattern: %s" % opts.blit.pattern


def get_commandline_options():
    """
    Accepts: (Nothing)

    Returns: opts  -- an instance of the options class that possesses members
                      specified by the 'dest' parameter of the add_option()
                      method.  Members contain the 'default' value unless
                      the user supplies a value from the command line using
                      the appropriate switch (i.e. '-r 100' or '--rows 100')

    optparse module documentation:
    https://docs.python.org/2/library/optparse.html
    """

    class ValidateBlit(argparse.Action):
        """
        Custom class to validate optional blit command line argument.
        """
        def __call__(self, parser, args, values, option_string=None):
            # static list of valid patterns in the patterns file
            valid_patterns = ('block', 'beehive', 'loaf', 'boat', 'blinker', 'glider', 'gosper_gun', 'ship', 'tub', 'beacon')
            # values are the args passed in after -b
            pattern, x, y = values
            # raise a custom error if the user doesn't input a valid pattern
            if pattern not in valid_patterns:
                print 'invalid pattern {s!r}. Exiting.'.format(s=pattern)
                sys.exit()
            # cast the coordinate arguments to ints; if the coordinates are not a valid number an error is thrown
            try:
                coord = [int(x), int(y)]
            except ValueError as e:
                print 'Invalid coordinate {}. Exiting.'.format((x, y))
                sys.exit()
            # create named tuple named Blit containing the pattern and coordinate: Blit(pattern='pattern', coord=[x y])
            Blit = collections.namedtuple('Blit', 'pattern coord')
            # set the attribute names to pattern and coord
            setattr(args, self.dest, Blit(pattern, coord))

    parser = argparse.ArgumentParser()

    parser.add_argument('-r', '--rows',
                        help='set # of rows in the world',
                        action='store',
                        type=int,
                        dest='rows',
                        default=50)

    parser.add_argument('-c', '--columns',
                        help='set # of columns in the world',
                        action='store',
                        type=int,
                        dest='cols',
                        default=50)

    parser.add_argument('-w', '--world',
                        help='type of world to generate',
                        action='store',
                        type=str,
                        dest='world_type',
                        choices=('random', 'empty'),
                        default='empty')

    parser.add_argument('-d', '--framedelay',
                        help='time (in milliseconds) between frames',
                        action='store',
                        type=int,
                        dest='framedelay',
                        default=100)

    parser.add_argument('-b', '--blit', nargs=3, action=ValidateBlit,
                        help='blit pattern followed by x y coordinate',
                        metavar=('BLIT', 'X', 'Y'))

    opts = parser.parse_args()
    return opts


def main():
    """
    The main function -- everything starts here!
    """
    opts = get_commandline_options()
    world = generate_world(opts)
    report_options(opts)

    if opts.blit:
        blit(world, getattr(patterns, opts.blit.pattern), opts.blit.coord[0], opts.blit.coord[1])

    run_simulation(opts, world)


if __name__ == '__main__':
    main()
